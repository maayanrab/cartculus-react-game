body {
  font-family: Arial, sans-serif;
  background: #f0f8ff;
  text-align: center;
  margin: 0;
  padding: 20px;
  overflow-x: hidden; /* Prevent horizontal scroll during animations */
}

.container {
  max-width: 800px;
  margin: auto;
}

/* Base Card Styling (for both hand and target, but target will override) */
.card {
  margin: 10px;
  position: relative; /* Essential for positioning children images correctly */
  display: inline-block; /* Helps with flow in grid */
  text-align: center;
  width: 90px; /* Standard width for hand cards */
  height: 120px; /* Standard height for hand cards */
  perspective: 1000px; /* Provides 3D perspective for flip */
  transition: transform 0.2s ease, box-shadow 0.2s ease; /* For selection animation */
  /* Ensure the main card container doesn't overflow its content during animation */
  overflow: hidden;
}

/* Invisible state for cards (used for cards removed from play, not for animation entrance) */
.invisible-card {
  visibility: hidden;
  /* Make sure it still occupies space so layout doesn't jump */
}

/* --- Card Flip Mechanism (applies to all flippable cards) --- */
.card-inner {
  position: relative;
  width: 100%;
  height: 100%;
  transition: transform 0.6s; /* Smooth flip animation */
  transform-style: preserve-3d; /* Crucial for 3D flip */
}

.card-face {
  position: absolute;
  width: 100%;
  height: 100%;
  backface-visibility: hidden; /* Hide the back of the element during flip */
  display: flex; /* Use flexbox to center image within face */
  justify-content: center;
  align-items: center;
}

.card-face img {
  max-width: 100%; /* Ensure image fits within its container */
  max-height: 100%; /* Ensure image fits within its container */
  object-fit: contain; /* Prevent stretching */
  display: block; /* Remove extra space below img */
}

.card-front {
  transform: rotateY(0deg);
}

.card-back {
  transform: rotateY(180deg);
}

/* This rule applies when the card-inner has the 'is-flipped' class */
.card-inner.is-flipped {
  transform: rotateY(180deg);
}

/* Card Label (abstract card value) */
.card-label {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-weight: bold;
  font-size: 20px;
  color: black;
  z-index: 2; /* Ensure label is above the card image */
  backface-visibility: hidden; /* Hide label when front face is flipped away */
}


/* --- Target Card Specific Styling --- */
.target {
  margin: 20px 0;
}

/* The .target-card-wrapper class applied by Card.js when isTarget is true */
.target .target-card-wrapper {
  width: 135px; /* Bigger width for target card */
  height: 180px; /* Bigger height for target card */
  cursor: default; /* Ensure no pointer cursor */
  box-shadow: none; /* Remove any selection shadow */
  /* Remove any global .card or animation transforms/transitions that might apply to this wrapper */
  transform: none; /* Ensure no unintended global transforms */
  transition: none; /* Ensure no unintended global transitions */
}

/* Make sure the card-inner for the target card behaves like any other flippable card */
.target .target-card-wrapper .card-inner {
    transition: transform 0.6s; /* Allow smooth flip */
    transform-style: preserve-3d; /* Crucial for 3D flip */
}

/* Ensure the card faces for the target card are properly set up for flipping */
.target .target-card-wrapper .card-face {
    position: absolute; /* Needed for flip */
    width: 100%;
    height: 100%;
    backface-visibility: hidden; /* Standard for flipping */
    display: flex;
    justify-content: center;
    align-items: center;
    transform: rotateY(0deg); /* Default for front face */
}

/* The back face of the target card */
.target .target-card-wrapper .card-face.card-back {
    transform: rotateY(180deg); /* Position back face correctly */
}

/* The actual flip for the target card */
.target .target-card-wrapper .card-inner.is-flipped {
    transform: rotateY(180deg); /* When is-flipped, show back */
}


.card.selected {
  transform: translateY(-10px);
  box-shadow: 0 0 10px 3px #00f5ff;
}

button {
  margin: 10px;
  padding: 10px 20px;
  font-size: 18px;
  cursor: pointer;
}

.operator-button {
  width: 70px;
  height: 70px;
  border-radius: 50%;
  padding: 5px;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  transition: transform 0.2s, box-shadow 0.2s;
  margin: 0 10px;
  background-color: transparent;
  border: none;
}

.operator-button:hover {
  transform: scale(1.1);
}

.operator-button.selected-operator {
  box-shadow: 0 0 15px 5px #00f5ff;
}

.operator-img {
  width: 100%;
  height: 100%;
  border-radius: 50%;
  object-fit: contain;
}

.target-border-bs {
  position: relative;
  display: inline-block;
  border: 2px solid #0d6efd;
  border-radius: 0.75rem;
  padding: 0.5rem;
  max-width: fit-content;
}

.target-text-bs {
  position: absolute;
  top: -0.75rem;
  left: 50%;
  transform: translateX(-50%);
  background-color: #f0f8ff;
  padding: 0 0.5rem;
  color: #0d6efd;
  font-weight: bold;
  font-size: 0.875rem;
  z-index: 10;
}

/* Reshuffle Animation */
/* Apply animation to the wrapper col-6 div */
.reshuffle-card-container.card-animating-out {
  animation: container-fly-out 0.7s forwards;
  /* Add hardware acceleration hint */
  will-change: transform, opacity;
}

/* This keyframe moves the entire Bootstrap column/container */
@keyframes container-fly-out {
  0% {
    opacity: 1;
    transform: translate(0, 0); /* Start at current position */
  }
  100% {
    opacity: 0;
    transform: translate(calc(var(--card-exit-x, 0px)), calc(var(--card-exit-y, 0px)));
  }
}

/* --- NEW / MODIFIED: Initial state for incoming cards before animation starts --- */
/* Add this class to your new card containers in JavaScript *before* appending them to the DOM
   and *before* adding 'card-animating-in'. */
.reshuffle-card-container.initial-offscreen-hidden {
  opacity: 0;
  transform: translate(var(--card-enter-x, 0px), var(--card-enter-y, 150vh));
  visibility: hidden; /* Hide immediately until animation starts */
  /* Ensure the inner card is also in its starting (flipped) state without transition */
  .card-inner {
      transform: rotateY(180deg);
      transition: none;
  }
}


/* This keyframe moves the entire Bootstrap column/container for new cards */
.reshuffle-card-container.card-animating-in {
  animation: container-fly-in 0.7s forwards;
  /* Ensure visibility is set to visible once animation starts */
  visibility: visible;
  /* Add hardware acceleration hint */
  will-change: transform, opacity;
}

@keyframes container-fly-in {
  0% {
    opacity: 0; /* Starts completely invisible */
    /* Use the initial transform directly from the custom property */
    transform: translate(var(--card-enter-x, 0px), var(--card-enter-y, 150vh));
  }
  1% {
    /* Become visible very quickly, effectively starting animation as fully visible */
    opacity: 1;
  }
  100% {
    opacity: 1;
    transform: translate(0, 0); /* End at target position */
  }
}

/* Ensure the card-inner in the incoming container does NOT flip during transit */
/* It should start flipped (back visible) and then flip after reaching position */
.reshuffle-card-container.card-animating-in .card-inner {
  transform: rotateY(180deg); /* Always show back during entry animation */
  transition: none; /* No flip transition during movement */
}

/* This is the flip AFTER the new cards are in place */
/* This rule applies when the .card-animating-in class is REMOVED */
.reshuffle-card-container:not(.card-animating-in) .card-inner.is-flipped {
  transform: rotateY(180deg); /* If isFlipped is true, stay on back */
  transition: transform 0.6s; /* Allow flipping for the final flip */
}

/* This is the state where hand cards flip from back to front */
/* This rule applies when .card-animating-in is REMOVED and .is-flipped is REMOVED (via !handCardsFlipped) */
.reshuffle-card-container:not(.card-animating-in) .card-inner:not(.is-flipped) {
  transform: rotateY(0deg); /* Flip to front */
  transition: transform 0.6s; /* Enable flip transition */
}


/* For stagger effect during new cards animating in */
.reshuffle-card-container.card-animating-in {
    animation-delay: var(--card-animation-delay); /* Apply animation delay to the wrapper */
}